; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /home/anhuar/Codes/Tec/IMECO/Clojure/my-project; clojure -Sdeps '{:deps {nrepl/nrepl {:mvn/version,"1.1.1"},cider/cider-nrepl {:mvn/version,"0.47.1"}}}' -M -m nrepl.cmdline --middleware "[cider.nrepl/cider-middleware]")
; Using host:port localhost:38105 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
(when-let [requires (resolve 'clojure.main/repl-requires)] (clojure.core/apply clojure.core/require @requires))
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
; Jack-in done.
clj꞉user꞉> 
4
4
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(defn enlista [lista]
  (concat (list (list (first lista))) (enlista (rest lista)))
  )
#'mynamespace.ProyectoSemaforoT/enlista
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(enlista '(1 2 3))
; Execution error (StackOverflowError) at mynamespace.ProyectoSemaforoT/enlista (REPL:622).
; null
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(defn enlista [lista]
(if (empty? lista) () 
  (concat (list (list (first lista))) (enlista (rest lista))))
  )
#'mynamespace.ProyectoSemaforoT/enlista
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(enlista '(1 2 3))
((1) (2) (3))
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(defn examen [f g] (fn [x] (f (g x))))
#'mynamespace.ProyectoSemaforoT/examen
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(def función (examen (fn [x] (* x x)) inc))
#'mynamespace.ProyectoSemaforoT/función
clj꞉mynamespace.ProyectoSemaforoT꞉> 
(función 2)
9
clj꞉mynamespace.ProyectoSemaforoT꞉> 
